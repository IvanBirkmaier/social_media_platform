openapi: 3.0.3
info:
  title: Social Media App API
  description: API for a social media application.
  version: "1.0.0"
servers:
  - url: http://localhost:8000
paths:
  /users/:
    post:
      tags:
        - user
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Username already registered

  /login/:
    post:
      tags:
        - user
      summary: User login
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Incorrect username or password

  /posts/:
    post:
      tags:
        - post
      summary: Create a new post
      operationId: createPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCreate'

  /comments/:
    post:
      tags:
        - comment
      summary: Create a new comment
      operationId: createComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentCreate'

  /users/{user_id}/posts/:
    get:
      tags:
        - user
      summary: Get posts by user
      operationId: getPostsByUser
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostCreate'  # Assuming same schema as PostCreate for simplicity

  /posts/{post_id}/comments/:
    get:
      tags:
        - post
      summary: Get comments for a post
      operationId: getCommentsByPost
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentCreate'  # Assuming same schema as CommentCreate for simplicity

  /users/username/{username}/:
    get:
      tags:
        - user
      summary: Get user ID by username
      operationId: getUserIdByUsername
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer

  /posts/random/:
    get:
      tags:
        - post
      summary: Get random posts not created by a specific user
      operationId: getRandomPosts
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of random posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostCreate'  # Assuming same schema as PostCreate for simplicity

components:
  schemas:
    UserCreate:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    UserResponse:
      type: object
      required:
        - id
        - username
        - email
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    PostCreate:
      type: object
      required:
        - user_id
        - description
        - base64_image
      properties:
        user_id:
          type: integer
        description:
          type: string
        base64_image:
          type: string
    CommentCreate:
      type: object
      required:
        - user_id
        - post_id
        - text
      properties:
        user_id:
          type: integer
        post_id:
          type: integer
        text:
          type: string
